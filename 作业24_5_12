https://leetcode.cn/problems/remove-zero-sum-consecutive-nodes-from-linked-list/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
struct ListNode* removeZeroSumSublists(struct ListNode* head) {
    struct ListNode* phead=(struct ListNode*)malloc(sizeof(struct ListNode));
    phead->next=head;
    struct ListNode* prev=phead;
    while(prev)
    {
        int x=0;
        struct ListNode* cur=prev->next;
        while(cur)
        {
            x+=cur->val;
            if(x==0)
            {
                struct ListNode* tmp=cur;
                prev->next=cur->next;
                cur=cur->next;
                free(tmp);
            }
            else
            {
                cur=cur->next;
            }
        }
        prev=prev->next;
    }
    return phead->next;
}

https://leetcode.cn/problems/multiply-strings/
class Solution {
public:
     string multiply(string num1, string num2) {
        if(num1=="0"||num2=="0")
        return "0";
        reverse(num1.begin(),num1.end());
        reverse(num2.begin(),num2.end());
        string ans(num1.size()+num2.size(),'0');
        int carry=0;
        for(int i=0;i<num1.size();i++)
        {
            for(int j=0;j<num2.size();j++)
            {
                carry+= (num1[i]-'0')*(num2[j]-'0')+(ans[i+j]-'0');
                ans[i+j]='0'+carry%10;
                carry/=10;
            }
            if(carry>0)
            {
                ans[i+num2.size()]=carry+'0';
                carry=0;
            }
        }
        while(ans.back()=='0')
        {
            ans.pop_back();
        }
        reverse(ans.begin(),ans.end());
        return ans;
     }
};
