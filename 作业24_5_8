https://leetcode.cn/problems/search-in-rotated-sorted-array/solutions/

class Solution {
public:
    int search(vector<int>& nums, int target) {
        int left=0,right=nums.size()-1;

        while(left<=right)
        {
            int mid=(left+right)/2;
            if(nums[mid]==target)
            return mid;
            if(nums[left]<=nums[mid])
            {
                if(target>=nums[left] && target<nums[mid])
                {
                    right=mid-1;
                }
                else
                left=mid+1;
            }
            else
            {
                if(target<=nums[right]&& target>nums[mid])
                {
                    left=mid+1;
                }
                else
                right=mid-1;
            }
        }
        return -1;
    }
};



https://leetcode.cn/problems/convert-binary-number-in-a-linked-list-to-integer/
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    int getDecimalValue(ListNode* head) {
        int sum=0;
        ListNode* cur=head;

        while(cur)
        {
            sum=sum*2+ cur->val;
            cur=cur->next;
        }
        return sum;
    }
};


https://leetcode.cn/problems/reverse-words-in-a-string-iii/
class Solution {
public:
    string reverseWords(string s) {
        string ans=s;
        int len=s.length();
        int i=0;
        while(i<len)
        {
            int start=i;
            while( i<len && s[i]!=' ')
            {
                i++;
            }
            //s[i]==' ' 
            for(int j=start;j<i;j++)
            {
                ans[i-1-(j-start)]=s[j];
            }
            //跳过空格
            while(i<len && s[i]==' ')
            {
                i++;
            }
        }
        return ans;
    }
};
